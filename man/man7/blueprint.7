.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "BLUEPRINT" "7" "December 2011" "DevStructure" "Blueprint"
.
.SH "NAME"
\fBblueprint\fR \- Blueprint Python library
.
.SH "SYNPOSIS"
.
.nf

import blueprint

b1 = blueprint\.Blueprint\.create(\'foo\')
b1\.commit()

b2 = blueprint\.Blueprint\.checkout(\'foo\')
b2\.puppet()\.dumpf(gzip=True)
b2\.chef()\.dumpf(gzip=True)
b2\.bcfg2()\.dumpf(gzip=True)
b2\.sh()\.dumpf(gzip=True)
.
.fi
.
.SH "DESCRIPTION"
.
.SS "blueprint\.Blueprint"
The \fBblueprint\.Blueprint\fR class manages blueprints stored in the local blueprint repository using the \fBgit\fR(1) tools\. New blueprints are created by calling the \fBblueprint\.Blueprint\.create\fR class method with a \fIname\fR\. Previously committed blueprints are recalled by calling the \fBblueprint\.Blueprint\.checkout\fR class method with a \fIname\fR and optionally a \fIcommit\fR\. Empty blueprints are created by calling the \fBblueprint\.Blueprint\fR constructor\.
.
.P
\fBblueprint\.Blueprint\fR objects may be subtracted from one another\.
.
.P
\fBblueprint\.Blueprint\fR objects support the following properties:
.
.TP
\fBarch\fR
The architecture of the system that created the blueprint\. Only present if the blueprint contains source tarballs\.
.
.TP
\fBfiles\fR
A dictionary that maps path names to file properties\. Each object contains \fBcontent\fR, \fBencoding\fR, \fBgroup\fR, \fBmode\fR, and \fBowner\fR\.
.
.TP
\fBmanagers\fR
A computed dictionary of each package manager mapped to its package manager\. Useful for reversing the algorithm described in \fBblueprint\fR(5)\.
.
.TP
\fBname\fR
This blueprint\'s name\.
.
.TP
\fBpackages\fR
A dictionary of package managers that map to dictionaries of managed packages mapped to a list of version numbers to be installed\.
.
.TP
\fBservices\fR
A dictionary of service managers that map to dictionaries of managed services mapped to resources on which the service depends\.
.
.TP
\fBsources\fR
A dictionary that maps directory names to the name of the tarball that contains the files to be extracted there\.
.
.P
\fBdumps()\fR serializes and returns the blueprint as JSON\.
.
.P
\fBcommit(message=\fR\fI\'\'\fR\fB)\fR records a new revision of this blueprint, optionally with \fImessage\fR as its Git commit message\.
.
.P
\fBpuppet()\fR, \fBchef()\fR, \fBbcfg2()\fR, \fBsh()\fR return \fBManifest\fR, \fBCookbook\fR, and \fBScript\fR objects, respectively\. See the next section\.
.
.P
\fBwalk()\fR is a generic implementation of the algorithm described in \fBblueprint\fR(5) which accepts callbacks as keyword arguments:
.
.TP
\fBbefore_sources():\fR Executed before source tarballs are enumerated\.

.
.TP
\fBsource(dirname, filename, gen_content, url):\fR Executed when a source tarball is enumerated\. Either \fBgen_content\fR or \fBurl\fR will be \fBNone\fR\. \fBgen_content\fR, when not \fBNone\fR, is a callable that will return the file\'s contents\.

.
.TP
\fBafter_sources():\fR Executed after source tarballs are enumerated\.

.
.TP
\fBbefore_files():\fR Executed before files are enumerated\.

.
.TP
\fBfile(pathname, f):\fR Executed when a file is enumerated\.

.
.TP
\fBafter_files():\fR Executed after files are enumerated\.

.
.TP
\fBbefore_packages(manager):\fR Executed before a package manager\'s dependencies are enumerated\.

.
.TP
\fBpackage(manager, package, version):\fR Executed when a package version is enumerated\.

.
.TP
\fBafter_packages(manager):\fR Executed after a package manager\'s dependencies are enumerated\.

.
.TP
\fBbefore_services(manager):\fR Executed before a service manager\'s dependencies are enumerated\.

.
.TP
\fBservice(manager, service, deps):\fR Executed when a service is enumerated\.

.
.TP
\fBservice_file(manager, service, pathname):\fR Executed when a file dependency is enumerated\.

.
.TP
\fBservice_package(manager, service, package_managername, package):\fR Executed when a package dependency is enumerated\.

.
.TP
\fBservice_source(manager, service, dirname):\fR Executed when a source tarball dependency is enumerated\.

.
.TP
\fBafter_services(manager):\fR Executed after a service manager\'s dependencies are enumerated\.

.
.P
The \fBblueprint\.Blueprint\fR class (not individual instances) supports \fBdestroy(\fR\fIname\fR\fB)\fR to destroy a blueprint, \fBiter()\fR to iterate over the names of blueprints, \fBload(\fR\fIf\fR\fB)\fR to load blueprint JSON from a file\-like object, and \fBloads(\fR\fIs\fR\fB)\fR to load blueprint JSON from a string\.
.
.SS "blueprint\.backend"
The \fBblueprint\.backend\fR module implements \fBblueprint\-create\fR(1)\. Each module within (for example, \fBblueprint\.backend\.apt\fR) must contain a function by the same name (in the example, \fBblueprint\.backend\.apt\.apt\fR) which accepts a \fBblueprint\.Blueprint\fR object and a \fBblueprint\.rules\.Rules\fR object\. When \fBblueprint\.backend\fR is imported, it finds all such functions, lists them in \fBblueprint\.backend\.__all__\fR, and imports the function\. Use the backend functions thus:
.
.IP "" 4
.
.nf

import blueprint
b = blueprint\.Blueprint()
import blueprint\.rules
r = blueprint\.rules\.defaults()
import blueprint\.backend
for funcname in blueprint\.backend\.__all__:
    getattr(blueprint\.backend, funcname)(b, r)
.
.fi
.
.IP "" 0
.
.SS "blueprint\.context_managers"
The \fBblueprint\.context_managers\fR module implements context managers used throughout \fBblueprint\fR(1)\.
.
.TP
\fBblueprint\.context_managers\.cd(\fR\fInew_cwd\fR\fB)\fR
Execute in a different working directory\. The property \fBold_cwd\fR is available on the context object containing the previous working directory\.
.
.TP
\fBblueprint\.context_managers\.mkdtemp(dir=\fR\fINone\fR\fB)\fR
Create a temporary directory and execute with it as the working directory\. The property \fBcwd\fR is available on the context object containing the previous working directory\. When the context closes, the temporary directory and all its contents are removed recursively\.
.
.SS "blueprint\.frontend"
\fBblueprint\.frontend\.puppet\.Manifest\fR, \fBblueprint\.frontend\.chef\.Cookbook\fR, and \fBblueprint\.frontend\.sh\.Script\fR all implement similar interfaces to code generation\.
.
.P
\fBblueprint\.frontend\.puppet\.puppet\fR, \fBblueprint\.frontend\.chef\.chef\fR, \fBblueprint\.frontend\.bcfg2\.bcfg2\fR, and \fBblueprint\.frontend\.sh\.sh\fR all accept a \fBblueprint\.Blueprint\fR as their argument and return one of the above types, which have the following methods\.
.
.P
\fBdumps()\fR returns a string containing code in the language implemented by the class that received the call\. If the blueprint contains source tarballs, \fBdumps()\fR may raise \fBValueError\fR\.
.
.P
\fBdumpf(gzip=\fR\fIFalse\fR\fB)\fR returns the name of a file, possibly in a newly\-created directory, containing code in the language implemented by the class that received the call\. The file or directory is created in the current working directory\. If \fBgzip=\fR\fITrue\fR, the file or directory will compressed and the resulting tarball will be left in the current working directory\.
.
.SS "blueprint\.git"
The \fBblueprint\.git\fR module exposes the \fBgit\fR(1) tools to Python via the standard \fBsubprocess\fR module\. \fBblueprint\.git\.git\fR is a direct proxy to running arbitrary Git commands\. Several commands have been wrapped specially to expose their results:
.
.TP
\fBblueprint\.git\.rev_parse(\fR\fIrefname\fR\fB)\fR
Return the commit associated with \fIrefname\fR\.
.
.TP
\fBblueprint\.git\.tree(\fR\fIcommit\fR\fB)\fR
Return the tree SHA associated with \fIcommit\fR\.
.
.TP
\fBblueprint\.git\.ls_tree(\fR\fItree\fR\fB)\fR
Generate the mode, type, SHA, and relative pathname of each file in \fItree\fR recursively\.
.
.TP
\fBblueprint\.git\.blob(\fR\fItree\fR\fB,\fR\fIpathname\fR\fB)\fR
Return the blob SHA associated with \fIpathname\fR in \fItree\fR\.
.
.TP
\fBblueprint\.git\.content(\fR\fIblob\fR\fB)\fR
Return the contents of \fIblob\fR\.
.
.TP
\fBblueprint\.git\.write_tree()\fR
Return the tree that results from writing the current index to the object store\.
.
.TP
\fBblueprint\.git\.commit_tree(\fR\fItree\fR\fB,\fR\fImessage\fR\fB,\fR\fIparent\fR\fB)\fR
Return the commit for \fItree\fR and \fIparent\fR with \fImessage\fR\.
.
.SS "blueprint\.io"
.
.TP
\fBblueprint\.io\.pull(\fR\fIserver\fR\fB,\fR\fIsecret\fR\fB,\fR\fIname\fR\fB)\fR
Pull a blueprint from \fIsecret\fR and \fIname\fR on \fIserver\fR\.
.
.TP
\fBblueprint\.io\.push(\fR\fIserver\fR\fB,\fR\fIsecret\fR\fB,\fR\fIb\fR\fB)\fR
Push a blueprint to \fIsecret\fR and \fIb\.name\fR on \fIserver\fR\.
.
.TP
\fBblueprint\.io\.secret(\fR\fIserver\fR\fB)\fR
Fetch a new secret from \fIserver\fR\.
.
.SS "blueprint\.io\.server"
The \fBblueprint\.io\.server\fR module contains a Flask application called \fBapp\fR which implements the HTTP endpoints expected by \fBblueprint\-push\fR(1) and \fBblueprint\-pull\fR(1)\.
.
.P
This application requires the \fBFlask\fR and \fBboto\fR Python libraries and recommends the \fBgunicorn\fR HTTP server\. The tests reqmore the \fBnose\fR and \fBnose\-cov\fR Python libraries\.
.
.SS "blueprint\.managers"
The \fBblueprint\.managers\.PackageManager\fR class is a \fBunicode\fR subclass that is used as the key in the \fBpackages\fR dictionary\. It is a callable that can translate package names and versions into shell commands for installing the package\. For example: \fBblueprint\.managers\.PackageManager(\fR\fI\'apt\'\fR\fB)(\fR\fI\'python\'\fR\fB,\fR\fI\'2\.6\.6\-2ubuntu1\'\fR\fB)\fR\.
.
.P
The \fBblueprint\.managers\.ServiceManager\fR class is like \fBblueprint\.managers\.PackageManager\fR but the callables to generate restart commands accept only one argument: the service name\. For example: \fBblueprint\.managers\.ServiceManager(\fR\fI\'sysvinit\'\fR\fB)(\fR\fI\'ssh\'\fR\fB)\fR\.
.
.SS "blueprint\.rules"
The \fBblueprint\.rules\.Rules\fR class is a \fBdefaultdict(list)\fR subclass that responds to \fBignore_file\fR, \fBignore_package\fR, \fBignore_service\fR, and \fBignore_source\fR\. It is instantiated by \fBblueprint\.rules\.defaults()\fR to access \fB/etc/blueprintignore\fR and \fB~/\.blueprintignore\fR or by \fBblueprint\.rules\.Rules\.parse(f)\fR to parse \fBblueprintignore\fR(5) rules from a file\-like object\.
.
.SH "FILES"
.
.TP
\fB~/\.blueprints\.git\fR
The local repsitory where blueprints are stored, each on its own branch\.
.
.SH "THEME SONG"
The Flaming Lips \- "The W\.A\.N\.D\. (The Will Always Negates Defeat)"
.
.SH "AUTHOR"
Richard Crowley \fIrichard@devstructure\.com\fR
.
.SH "SEE ALSO"
Part of \fBblueprint\fR(1)\.
